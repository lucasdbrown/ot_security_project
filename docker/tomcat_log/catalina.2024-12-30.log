30-Dec-2024 10:15:43.798 WARNING [pool-4-thread-480 - HIGH - BatchWriteBehind{instances size: 1}] org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.reportSlowQuery Slow Query Report SQL=insert pointValues (dataPointId,dataType,pointValue,ts) values (?,?,?,?); time=1436461 ms;
30-Dec-2024 16:14:41.939 INFO [Thread-4] org.apache.coyote.AbstractProtocol.pause Pausing ProtocolHandler ["http-nio-8080"]
30-Dec-2024 16:14:41.941 INFO [Thread-4] org.apache.catalina.core.StandardService.stopInternal Stopping service [Catalina]
30-Dec-2024 16:14:43.089 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [Serotonin Timer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/java.lang.Object.wait(Native Method)
 com.serotonin.timer.TimerThread.mainLoop(TimerThread.java:106)
 com.serotonin.timer.TimerThread.run(TimerThread.java:37)
30-Dec-2024 16:14:43.089 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-5-thread-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.LinkedBlockingQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.090 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-5-thread-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.LinkedBlockingQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.091 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-5-thread-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.LinkedBlockingQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.091 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-5-thread-4] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.LinkedBlockingQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.092 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-534] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.092 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-578] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.093 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-594] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.094 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-595] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.095 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-596] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.095 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-597] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.096 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-598] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.096 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-599] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.097 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-600] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.097 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-601] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.098 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-602] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.098 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-603] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.099 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-604] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.099 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-605] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.100 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-606] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.100 WARNING [Thread-4] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [Scada-LTS] appears to have started a thread named [pool-4-thread-607] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@11.0.22/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@11.0.22/java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.base@11.0.22/java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.base@11.0.22/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.base@11.0.22/java.lang.Thread.run(Unknown Source)
30-Dec-2024 16:14:43.109 INFO [Thread-4] org.apache.coyote.AbstractProtocol.stop Stopping ProtocolHandler ["http-nio-8080"]
30-Dec-2024 16:14:43.119 INFO [Thread-4] org.apache.coyote.AbstractProtocol.destroy Destroying ProtocolHandler ["http-nio-8080"]
